@page "/bloodbankdashboard"
@using BloodDonationApp.Components.Shared
@layout BloodBankDasboardLayout
@rendermode InteractiveServer
@inject InventoryService InventoryService

@using BloodInventoryManager.Models

<link href="css/BloodBankdashboard.css" rel="stylesheet" />

<h2 class="inventory-header">Welcome to the Blood Bank Dashboard</h2>

<div class="row mb-4">
    @foreach (var group in groupCounts)
    {
        <div class="col-md-3">
            <div class="inventory-card">
                <h5>@group.Key</h5>
                <p>Units: @group.Value</p>
            </div>
        </div>
    }
</div>

@if (inventoryList?.Any() == true)
{
    <h4 class="inventory-header">Current Inventory</h4>
    <table class="table table-bordered inventory-table">
        <thead>
            <tr>
                <th>Blood Group</th>
                <th>Units Available</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in inventoryList)
            {
                <tr>
                    <td>@item.BloodGroup</td>
                    <td>@item.UnitsAvailable</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => StartEdit(item)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(item.InventoryID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (editingItem != null)
{
    <div class="mt-4 p-3 bg-light rounded border">
        <h5>Edit Inventory: @editingItem.BloodGroup</h5>
        <EditForm Model="@editingItem" OnValidSubmit="HandleEditSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-2">
                <label>Units Available</label>
                <InputNumber class="form-control" @bind-Value="editingItem.UnitsAvailable" />
            </div>
            <button type="submit" class="btn btn-success me-2">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="() => editingItem = null">Cancel</button>
        </EditForm>
    </div>
}

@if (showConfirm)
{
    <div class="modal-backdrop"></div>
    <div class="modal-dialog">
        <h5>Are you sure you want to delete this inventory record?</h5>
        <button class="btn btn-danger" @onclick="ConfirmDeleteYes">Yes, Delete</button>
        <button class="btn btn-secondary" @onclick="ConfirmDeleteNo">Cancel</button>
    </div>
}


@code {
    List<BloodInventoryModel> inventoryList = new();
    Dictionary<string, int> groupCounts = new();
    BloodInventoryModel? editingItem;
    private int? deleteTargetId = null;
    private bool showConfirm = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        inventoryList = await InventoryService.GetInventoryAsync();
        groupCounts = await InventoryService.GetBloodGroupCountsAsync();
    }

    private void StartEdit(BloodInventoryModel item)
    {
        editingItem = new BloodInventoryModel
            {
                InventoryID = item.InventoryID,
                BloodGroup = item.BloodGroup,
                UnitsAvailable = item.UnitsAvailable
            };
    }

    private async Task HandleEditSubmit()
    {
        if (editingItem != null)
        {
            await InventoryService.UpdateInventoryAsync(editingItem);
            editingItem = null;
            await LoadData();
        }
    }

    private void ConfirmDelete(int id)
    {
        deleteTargetId = id;
        showConfirm = true;
    }

    private async Task ConfirmDeleteYes()
    {
        if (deleteTargetId != null)
        {
            await InventoryService.DeleteInventoryAsync(deleteTargetId.Value);
            deleteTargetId = null;
            showConfirm = false;
            await LoadData();
        }
    }

    private void ConfirmDeleteNo()
    {
        deleteTargetId = null;
        showConfirm = false;
    }
}

